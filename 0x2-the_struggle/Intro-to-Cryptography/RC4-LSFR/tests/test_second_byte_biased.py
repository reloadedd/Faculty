# Copyright (c) 2021 reloadedd <reloadedd@protonmail.com>

import unittest
from rich import box
from rich.live import Live
from rich.table import Table
from rich.console import Console
from RC4.RC4Encryptor import RC4Encryptor
from RC4.utils import generate_random_sequence


class TestSecondByteBiasedInRC4(unittest.TestCase):
    SAMPLE_SIZE = 300_000
    KEY_LENGTH = 10
    IDEAL_PROBABILITY = 1 / 128

    @staticmethod
    def update(iteration: int, password: str) -> Table:
        table = Table("# Iteration No.", "Password", box=box.SIMPLE)
        table.add_row(str(iteration), password)

        return table

    def test_bias(self):
        """Test a bias in the RC4 Stream Cipher.

        Test if the value of the second byte generated by the RC4 Stream Cipher
        has a probability of 1/128 of being 0x00.
        """
        console = Console()
        rc4_second_bytes = []
        password = ''.join(generate_random_sequence(
            TestSecondByteBiasedInRC4.KEY_LENGTH))

        with Live(console=console, refresh_per_second=10) as live:
            for i in range(TestSecondByteBiasedInRC4.SAMPLE_SIZE):
                live.update(self.update(i + 1, password), refresh=False)

                encryptor = RC4Encryptor(password, '')
                encryptor.init_stage()

                # Discard the first byte
                encryptor.trans_stage()

                # Save the second byte to the list
                rc4_second_bytes.append(encryptor.trans_stage())

                password = ''.join(generate_random_sequence(
                    TestSecondByteBiasedInRC4.KEY_LENGTH))
                del encryptor

        # Now, check the results
        zero_bytes = rc4_second_bytes.count(0x00)
        probability = zero_bytes / TestSecondByteBiasedInRC4.SAMPLE_SIZE
        lower_bound = TestSecondByteBiasedInRC4.IDEAL_PROBABILITY - 0.005
        upper_bound = TestSecondByteBiasedInRC4.IDEAL_PROBABILITY + 0.005
        self.assertTrue(lower_bound <= probability <= upper_bound,
                        "The sample size is too small")

        console.print(f'[cyan][INFO]:[/cyan] The ideal probability is '
                      f'\t{TestSecondByteBiasedInRC4.IDEAL_PROBABILITY}')
        console.print(f'[red][NOTE]:[/red] This is what we\'ve got '
                      f'\t\t{probability}')


if __name__ == '__main__':
    unittest.main()
