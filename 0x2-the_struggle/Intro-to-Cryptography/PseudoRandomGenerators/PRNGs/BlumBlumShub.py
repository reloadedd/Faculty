# Copyright (c) 2021 reloadedd <reloadedd@protonmail.com>

import random
from rich import print
from PRNGs.Helper import Helper


class BlumBlumShub:
    def __init__(self):
        # Before doing anything else, display the setup
        Helper.print_setup_info()

        self.big_m = Helper.generate_big_m()
        self.seed = random.randrange(1, self.big_m - 1)
        print(f'[green][ DEBUG ]:[/green] Seed = {self.seed}')

        self.generated_numbers_count = 0
        self.previous = self.seed

    def _generate_bit(self) -> int:
        """Generate a pseudo-random bit.

        This function is meant to be used in a loop, for generating multiple
        pseudo-random bits. The BBS generator saves in its internals the seed
        and the previous number. For the first generated bit, the seed and
        the previous number are equal. Then, for the next iterations, the
        bits are generated by following the pattern:
            ====> x_[n] = (x_[n - 1]) ^ 2 % M
            ====> return x_[n] % 2

        :returns    the bit generated.
        """
        current = (self.previous ** 2) % self.big_m
        self.previous = current
        self.generated_numbers_count += 1

        return current % 2

    def generate(self,  how_many: int):
        """Generate a number of pseudo-random bits.

        :param how_many     the number of bits to generate.
        """
        for _ in range(how_many):
            yield self._generate_bit()
